// BEGIN CUT HERE
// PROBLEM STATEMENT
// 
// For strings x and y, we say y is a subsequence of x if y can be obtained from 
// x by erasing some (possibly all or none) of the letters in x. For example, 
// "tpcdr" is a subsequence of "topcoder", while "rt" is not. 
// 
// Given a string s, return the lexicographically largest subsequence of s. 
// 
// 
// DEFINITION
// Class:LargestSubsequence
// Method:getLargest
// Parameters:string
// Returns:string
// Method signature:string getLargest(string s)
// 
// 
// NOTES
// -For strings x and y, x is said to be lexicographically larger than y if y is 
// a prefix of x or y has a smaller character than x at the first position where 
// they differ. Order of characters is defined as the order of ASCII codes: 'a' < 
// 'b' < ... < 'z'. 
// 
// 
// CONSTRAINTS
// -s will contain between 1 and 50 characters, inclusive. 
// -Each character in s will be a lowercase letter ('a'-'z').
// 
// 
// EXAMPLES
// 
// 0)
// "test"
// 
// Returns: "tt"
// 
// All subsequences listed in lexicographical order are "" (empty string), "e", 
// "es", "est", "et", "s", "st", "t", "te", "tes", "test", "tet", "ts", "tst" and 
// "tt". So return "tt".
// 
// 1)
// "a"
// 
// Returns: "a"
// 
// There are only two subsequences, "" and "a". 
// 
// 2)
// "example"
// 
// Returns: "xple"
// 
// 
// 
// 3)
// "aquickbrownfoxjumpsoverthelazydog"
// 
// Returns: "zyog"
// 
// 
// 
// END CUT HERE
#line 65 "LargestSubsequence.cpp"
#include <iostream>
#include <sstream>
#include <algorithm>
#include <string>
#include <vector>
#include <cmath> 
#include <map> 
#include <queue> 
#include <stack> 

using namespace std; 

class LargestSubsequence {
	public:
	string getLargest(string s) {
		
	}
};
